{"version":3,"sources":["src/index.js","src/lib/markers.js","src/lib/node-walker.js","src/lib/template-parser.js","src/lib/templates.js","src/lib/dom.js","src/lib/directive.js","src/lib/parts.js","src/lib/render.js","src/lib/html.js","util/date.js","components/Posts.js","components/Comments.js","components/User.js","components/About.js","components/Display.js","util/cache.js","app.js"],"names":["marker","Math","random","toString","slice","padStart","attributeMarker","IEStyleMarker","commentMarker","failMarker","nodeMarker","lastAttributeNameRegex","filter","findParts","strings","template","parts","recursiveSearch","node","path","nodeType","nodeValue","push","type","CommentPart","NodePart","hasAttribute","Error","removeAttribute","dynamicAttributes","call","attributes","attribute","value","length","getAttribute","i","exec","AttributePart","children","childNodes","concat","content","attributeMarkerTag","commentMarkerTag","nodeMarkerTag","attributeContext","commentContext","nodeContext","unchangedContext","markers","Map","set","parseContext","string","openComment","context","lastIndexOf","commentClosed","indexOf","closeTag","parseTemplate","html","lastStringIndex","currentContext","get","join","buildTemplate","document","createElement","innerHTML","templateMap","Template","element","TemplateResult","values","_template","undefined","TemplateInstance","parent","before","after","fragment","cloneNode","map","part","forEach","nodeIndex","previousSibling","nextSibling","parentNode","index","render","moveNodes","oldParent","previous","move","nextNode","newParent","nodeToMove","firstChild","Node","insertBefore","removeChild","directives","WeakMap","isDirective","has","isSerializable","isIterable","nonPrimitive","Array","isArray","Symbol","iterator","noChange","emptyNode","iterableNode","beforeNode","afterNode","clear","_renderText","_renderTemplateResult","_renderIterable","_renderNode","then","_renderPromise","String","promise","serializable","textContent","createTextNode","templateResult","templateInstances","instance","iterable","iterableParts","lastChild","lastPart","DocumentFragment","_render","_renderProperty","_renderBoolean","_renderEvent","name","_renderAttribute","boolean","setAttribute","listener","removeEventListener","addEventListener","nodeParts","target","component","config","data","methods","props","nodes","querySelectorAll","state","JSON","parse","stringify","lifeCycle","onMount","onUpdate","Object","keys","key","bind","internalValue","defineProperty","newValue","from","attr","dateFormat","epuch","date","Date","timeSince","setUTCSeconds","actualDate","ye","Intl","DateTimeFormat","year","format","mo","month","da","day","seconds","floor","interval","AllPosts","posts","post","Item","titleURL","URL","url","hostname","substring","awards","total_awards_received","commentURL","permalink","createdDate","created_utc","title","ups","author","num_comments","Comments","response","info","comment","Comment","replies","moreText","reply","body","User","actual","relative","icon_img","comment_karma","link_karma","About","Loading","error","getData","localStorage","getItem","fetch","json","setItem","root","getElementById","hashChangeHandler","hash","window","location","getPosts","getComments","getUser","e"],"mappings":"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","file":"app.b87a58a1.js","sourceRoot":"..\\src","sourcesContent":["import { render } from './lib/render.js';\r\nimport { html } from './lib/html.js';\r\n\r\nexport default {\r\n  /**\r\n   * Create custom reusable components for usage in HTML\r\n   * @param {string} name\r\n   *   Name of the component. Best practice is to use follow web components standard and use kebab-case\r\n   * @param {Object} config\r\n   *   Configuration of the component. This includes template, data, methods and props (if any)\r\n   * @param {Object=} config.data\r\n   * @param {Object=} config.methods\r\n   * @param {Array<string>=} config.props\r\n   * @param {TemplateResult} config.template\r\n   */\r\n  component(name, config) {\r\n    const { data, methods, props, template } = config;\r\n\r\n    if (name.indexOf('<') > -1 || name.indexOf('>') > -1) {\r\n      throw new Error('Do not use < or > while declaring component');\r\n    }\r\n\r\n    if (!template) {\r\n      throw new Error('\"template\" is required for creating components');\r\n    }\r\n\r\n    if (typeof template !== 'function') {\r\n      throw new Error('\"template\" should be a function');\r\n    }\r\n\r\n    const nodes = document.querySelectorAll(name);\r\n    if (!nodes.length) {\r\n      throw new Error(`<${name}> was not found.`);\r\n    }\r\n\r\n    nodes.forEach(node => {\r\n      let state = {};\r\n\r\n      if (data) {\r\n        state = { ...JSON.parse(JSON.stringify(data)) };\r\n      }\r\n\r\n      if (methods) {\r\n        state = { ...state, ...methods };\r\n      }\r\n      // Create a copy of data for each element\r\n      // Component LifeCycle Methods\r\n      const lifeCycle = {\r\n        onMount: null,\r\n        onUpdate: null\r\n      };\r\n\r\n      if (JSON.stringify(state) !== '{}') {\r\n        // Proxying the 'data' members\r\n        Object.keys(state).forEach(key => {\r\n          if (typeof state[key] === 'function') {\r\n            state[key] = state[key].bind(state);\r\n\r\n            if (key === 'onmount') {\r\n              lifeCycle.onMount = state[key];\r\n            }\r\n            if (key === 'onupdate') {\r\n              lifeCycle.onUpdate = state[key];\r\n            }\r\n          } else {\r\n            let internalValue = state[key];\r\n            Object.defineProperty(state, key, {\r\n              get() {\r\n                return internalValue;\r\n              },\r\n              set(newValue) {\r\n                internalValue = newValue;\r\n                render(template(state), node);\r\n                // Calling update for every subsequent render\r\n                if (lifeCycle.onUpdate) {\r\n                  lifeCycle.onUpdate();\r\n                }\r\n              }\r\n            });\r\n          }\r\n        });\r\n      }\r\n      // Handling the props passed by the component and then removing them\r\n      if (props && props.length) {\r\n        state.props = {};\r\n        const attributes = Array.from(node.attributes);\r\n        attributes.forEach(attr => {\r\n          if (props.indexOf(attr.name) > -1) {\r\n            state.props[attr.name] = attr.value;\r\n            node.removeAttribute(attr.name);\r\n          }\r\n        });\r\n        if (JSON.stringify(state.props) === '{}') {\r\n          delete state.props;\r\n        }\r\n      }\r\n      render(template(state), node);\r\n      // Calling onmount\r\n      if (lifeCycle.onMount) {\r\n        lifeCycle.onMount();\r\n      }\r\n    });\r\n  }\r\n};\r\n\r\nexport { render, html };\r\n","export const marker = Math.random()\r\n  .toString(36)\r\n  .slice(2)\r\n  .padStart(10, '0');\r\nexport const attributeMarker = `font-family:${marker}`;\r\nexport const IEStyleMarker = `font-family: ${marker};`;\r\nexport const commentMarker = `comment-${marker}`;\r\nexport const failMarker = `node-${marker}`;\r\nexport const nodeMarker = `${failMarker}\" ${failMarker} `;\r\n","import {\r\n  IEStyleMarker,\r\n  attributeMarker,\r\n  commentMarker,\r\n  nodeMarker,\r\n  failMarker\r\n} from './markers.js';\r\nimport { AttributePart, CommentPart, NodePart } from './parts.js';\r\n\r\n// eslint-disable-next-line no-control-regex\r\nconst lastAttributeNameRegex = /[ \\x09\\x0a\\x0c\\x0d]([^\\0-\\x1F\\x7F-\\x9F \\x09\\x0a\\x0c\\x0d\"'>=/]+)[ \\x09\\x0a\\x0c\\x0d]*=$/;\r\nconst filter = [].filter;\r\n\r\nexport const findParts = (strings, template) => {\r\n  let parts = [];\r\n\r\n  // Recursive depth-first tree traversal that finds nodes in the subtree of `node` that are parts\r\n  // The path is an array of incides of childNodes to get to this node\r\n  const recursiveSearch = (node, path) => {\r\n    // If the node is a CommentNode, check if it is a marker for a CommentPart or NodePart\r\n    if (node.nodeType === 8) {\r\n      if (node.nodeValue === commentMarker) {\r\n        parts.push({ type: CommentPart, path });\r\n      } else if (node.nodeValue === nodeMarker) {\r\n        parts.push({ type: NodePart, path });\r\n      }\r\n      // If it is not a marker for a Part, it is a regular comment\r\n    } else {\r\n      // If the node is an ElementNode, it may contain AttributeParts\r\n      if (node.nodeType === 1) {\r\n        // If the node has the failMarker, the context was incorrectly recognised as a Node context\r\n        // This happens when an attribute literal contains the '>' character\r\n        // There is no way to fix this, so throw an error to alert the developer to fix it\r\n        if (node.hasAttribute(failMarker)) {\r\n          throw new Error(\r\n            'The \\'>\\' character is not allowed in attribute literals. Replace with \\'&gt;'\r\n          );\r\n        }\r\n        // If the node has any AttributeParts, it will have the attributeMarker attribute set\r\n        if (node.hasAttribute(attributeMarker)) {\r\n          node.removeAttribute(attributeMarker);\r\n\r\n          // Find the number of dynamic attributes by checking all attribute values against the attributeMarker\r\n          let dynamicAttributes = filter.call(\r\n            node.attributes,\r\n            attribute => attribute.value === attributeMarker\r\n          ).length;\r\n\r\n          // If the node has the 'style' attribute, test against IEStyleMarker to check if the attribute is dynamic\r\n          if (node.getAttribute('style') === IEStyleMarker) {\r\n            dynamicAttributes += 1;\r\n          }\r\n\r\n          for (let i = 0; i < dynamicAttributes; i++) {\r\n            // Find the name of this AttributePart using the lastAttributeNameRegex on the string before this part\r\n            const attribute = lastAttributeNameRegex.exec(\r\n              strings[parts.length]\r\n            )[1];\r\n            parts.push({ type: AttributePart, path, attribute });\r\n          }\r\n        }\r\n      }\r\n\r\n      // Recursively search all children of this node\r\n      const children = node.childNodes;\r\n      const length = children.length;\r\n      for (let i = 0; i < length; i++) {\r\n        recursiveSearch(children[i], path.concat([i]));\r\n      }\r\n    }\r\n  };\r\n\r\n  // Recursively search the content of the template for parts\r\n  recursiveSearch(template.content, []);\r\n\r\n  // If we found less parts than we should, something went wrong\r\n  // Most likely a double attribute assignment was dropped by the HTML parser\r\n  // Throw an error and warn the developer\r\n  if (parts.length < strings.length - 1) {\r\n    throw new Error(\r\n      'Double attribute assignments are not allowed: \\'<div a=${0} a=${0}>\\''\r\n    );\r\n  }\r\n  return parts;\r\n};\r\n","import { attributeMarker, commentMarker, nodeMarker } from './markers.js';\r\n\r\n// The second marker is to add a boolean attribute to the element\r\n// This is to easily test if a node has dynamic attributes by checking against that attribute\r\nexport const attributeMarkerTag = `${attributeMarker} ${attributeMarker}`;\r\n\r\n// The space at the end is necessary, to avoid accidentally closing comments with `<!-->`\r\nexport const commentMarkerTag = `--><!--${commentMarker}--><!-- `;\r\n\r\n// The extra content at the end is to add a flag to an element when\r\n// a nodeMarkerTag is inserted as an attribute due to an attribute containing `>`\r\nexport const nodeMarkerTag = `<!--${nodeMarker}-->`;\r\n\r\nexport const attributeContext = {};\r\nexport const commentContext = {};\r\nexport const nodeContext = {};\r\nexport const unchangedContext = {};\r\n\r\nconst markers = new Map();\r\nmarkers.set(attributeContext, attributeMarkerTag);\r\nmarkers.set(commentContext, commentMarkerTag);\r\nmarkers.set(nodeContext, nodeMarkerTag);\r\n\r\nexport const parseContext = string => {\r\n  const openComment = string.lastIndexOf('<!--');\r\n  const closeComment = string.indexOf('-->', openComment + 1);\r\n  const commentClosed = closeComment > -1;\r\n  let context;\r\n  if (openComment > -1 && !commentClosed) {\r\n    context = commentContext;\r\n  } else {\r\n    const closeTag = string.lastIndexOf('>');\r\n    const openTag = string.indexOf('<', closeTag + 1);\r\n    if (openTag > -1) {\r\n      context = attributeContext;\r\n    } else {\r\n      if (closeTag > -1) {\r\n        context = nodeContext;\r\n      } else {\r\n        context = unchangedContext;\r\n      }\r\n    }\r\n  }\r\n  return { commentClosed, context };\r\n};\r\n\r\nexport const parseTemplate = strings => {\r\n  const html = [];\r\n  const lastStringIndex = strings.length - 1;\r\n  let currentContext = nodeContext;\r\n  for (let i = 0; i < lastStringIndex; i++) {\r\n    const string = strings[i];\r\n    const { commentClosed, context } = parseContext(string);\r\n    if (\r\n      (currentContext !== commentContext || commentClosed) &&\r\n      context !== unchangedContext\r\n    ) {\r\n      currentContext = context;\r\n    }\r\n    if (currentContext === attributeContext && string.slice(-1) !== '=') {\r\n      throw new Error('Only bare attribute parts are allowed: `<div a=${0}>`');\r\n    }\r\n    html.push(string + markers.get(currentContext));\r\n  }\r\n\r\n  html.push(strings[lastStringIndex]);\r\n  return html.join('');\r\n};\r\n\r\nexport const buildTemplate = strings => {\r\n  const template = document.createElement('template');\r\n  template.innerHTML = parseTemplate(strings);\r\n  return template;\r\n};\r\n","import { findParts } from './node-walker.js';\r\nimport { buildTemplate } from './template-parser.js';\r\nimport { NodePart } from './parts.js';\r\n/**\r\n * A map that contains all the template literals we have seen before\r\n * It maps from a String array to a Template object\r\n *\r\n * @typedef {Map.<[String], Template>}\r\n */\r\nconst templateMap = new Map();\r\n\r\n/**\r\n * Template holds the DocumentFragment that is to be used as a prototype for instances of this template\r\n * When a template is to be rendered in a new location, a clone will be made from this\r\n *\r\n * @prop {[String]} strings\r\n *   The unique string array that this template represents\r\n * @prop {[DocumentFragment]} element\r\n *   The DocumentFragment that can be cloned to make instances of this template\r\n * @prop {[Object]} parts\r\n *   The descriptions of the parts in this Template. Each part has a path which defines a unique location in the\r\n *   template DOM tree, a type which defines the part type, and an optional attribute which defines the name of\r\n *   the attribute this part represents.\r\n */\r\nexport class Template {\r\n  constructor(strings) {\r\n    this.strings = strings;\r\n    this.element = buildTemplate(strings);\r\n    this.parts = findParts(strings, this.element);\r\n  }\r\n}\r\n\r\n/**\r\n * TemplateResult holds the strings and values that result from a tagged template string literal.\r\n * TemplateResult can find and return a unique Template object that represents its tagged template string literal.\r\n */\r\nexport class TemplateResult {\r\n  constructor(strings, values) {\r\n    this.strings = strings;\r\n    this.values = values;\r\n    this._template = undefined;\r\n  }\r\n\r\n  /**\r\n   * @returns {Template}\r\n   *   A unique Template object..\r\n   *   Each evaluation of html`..` yields a new TemplateResult object, but they will have the same\r\n   *   Template object when they are the result of the same html`..` literal.\r\n   *\r\n   */\r\n  get template() {\r\n    if (this._template) {\r\n      return this._template;\r\n    }\r\n    let template = templateMap.get(this.strings);\r\n    if (!template) {\r\n      template = new Template(this.strings);\r\n      templateMap.set(this.strings, template);\r\n    }\r\n    this._template = template;\r\n    return template;\r\n  }\r\n}\r\n\r\n/**\r\n * An instance of a template that can be rendered somewhere\r\n *\r\n * @prop {Template} template\r\n *   The unique Template object that this is an instance of\r\n * @prop {[DocumentFragment]} fragment\r\n *   The DocumentFragment that is a clone of the Template's prototype DocumentFragment\r\n * @prop {[AttributePart|CommentPart|NodePart|]} parts\r\n *   The parts that render into this template instance\r\n */\r\nexport class TemplateInstance {\r\n  constructor(template, parent, before, after) {\r\n    this.template = template;\r\n    this.fragment = template.element.content.cloneNode(true);\r\n\r\n    // Create new Parts based on the part definitions set on the Template\r\n    const parts = this.template.parts.map(part => {\r\n      let node = this.fragment;\r\n      part.path.forEach(nodeIndex => {\r\n        node = node.childNodes[nodeIndex];\r\n      });\r\n      part.node = node;\r\n      if (part.type === NodePart) {\r\n        if (part.path.length === 1) {\r\n          part.parent = parent;\r\n          part.before = node.previousSibling || before;\r\n          part.after = node.nextSibling || after;\r\n        } else {\r\n          part.parent = node.parentNode;\r\n        }\r\n      }\r\n      return part;\r\n    });\r\n    this.parts = parts.map(part => new part.type(part));\r\n  }\r\n\r\n  /**\r\n   * Render values into the parts of this TemplateInstance\r\n   *\r\n   * @param {[any]} values\r\n   *   An array of values to render into the parts. There should be one value per part\r\n   */\r\n  render(values) {\r\n    this.parts.map((part, index) => part.render(values[index]));\r\n  }\r\n}\r\n","/**\r\n * Move nodes from to a new parent, or remove them from the old parent if no new parent is given\r\n */\r\nexport const moveNodes = (\r\n  oldParent,\r\n  previous = null,\r\n  after = null,\r\n  newParent,\r\n  before\r\n) => {\r\n  let nodeToMove = previous ? previous.nextSibling : oldParent.firstChild;\r\n  if (nodeToMove !== null) {\r\n    // If the new Parent is a Node, we move the nodes instead of removing them\r\n    let move;\r\n    if (newParent instanceof Node) {\r\n      move = () => newParent.insertBefore(nodeToMove, before);\r\n    } else {\r\n      move = () => oldParent.removeChild(nodeToMove);\r\n    }\r\n    let nextNode;\r\n    while (nodeToMove !== after) {\r\n      nextNode = nodeToMove.nextSibling;\r\n      move(nodeToMove);\r\n      nodeToMove = nextNode;\r\n    }\r\n  }\r\n};\r\n","const directives = new WeakMap();\r\n\r\nexport const isDirective = value => directives.has(value);\r\n\r\nexport const directive = directive => {\r\n  directives.set(directive, null);\r\n  return directive;\r\n};\r\n","import { TemplateResult, TemplateInstance } from './templates.js';\r\nimport { moveNodes } from './dom.js';\r\nimport { isDirective } from './directive.js';\r\n\r\nexport const isSerializable = value =>\r\n  typeof value === 'string' ||\r\n  typeof value === 'number' ||\r\n  typeof value === 'boolean';\r\nexport const isIterable = nonPrimitive =>\r\n  Array.isArray(nonPrimitive) || nonPrimitive[Symbol.iterator];\r\n\r\n// A flag that signals that no render should happen\r\nexport const noChange = {};\r\n\r\n// A node type for empty parts\r\nconst emptyNode = {};\r\n\r\n// A node type for NodeParts that contain an iterable\r\nconst iterableNode = {};\r\n\r\nexport class NodePart {\r\n  // node OR parent _must_ be defined\r\n  // If a node is defined, this NodePart represents the position of that node in the tree\r\n  // If a only a parent is defined, this NodePart represents the content of the parent\r\n  constructor({ node, parent, before, after }) {\r\n    this.node = node || emptyNode;\r\n    this.value = noChange;\r\n\r\n    this.parentNode = parent || (node && node.parentNode);\r\n    this.beforeNode = before || (node && node.previousSibling);\r\n    this.afterNode = after || (node && node.nextSibling);\r\n  }\r\n\r\n  render(value) {\r\n    if (isDirective(value)) {\r\n      value(this);\r\n    } else if (value !== noChange) {\r\n      if (value == null) {\r\n        this.clear();\r\n      } else if (isSerializable(value)) {\r\n        this._renderText(value);\r\n      } else if (value instanceof TemplateResult) {\r\n        this._renderTemplateResult(value);\r\n      } else if (isIterable(value)) {\r\n        this._renderIterable(value);\r\n      } else if (value instanceof Node) {\r\n        this._renderNode(value);\r\n      } else if (value.then !== undefined) {\r\n        this._renderPromise(value);\r\n        // Return here because we do not want to set `this.value` with the promise\r\n        return;\r\n      } else {\r\n        value = String(value);\r\n        this._renderText(value);\r\n      }\r\n      this.promise = undefined;\r\n      this.value = value;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Render a serializable value in this part\r\n   *\r\n   * Strings, Numbers, and Booleans are serializable\r\n   * Serializable values are rendered as textContent of a TextNode\r\n   */\r\n  _renderText(serializable) {\r\n    // If the text is not equal to the previously rendered value\r\n    if (this.value !== serializable) {\r\n      // If the node is a TextNode, replace the content of that node\r\n      // Otherwise, create a new TextNode with the primitive value as content\r\n      if (this.node.nodeType === 3) {\r\n        this.node.textContent = serializable;\r\n      } else {\r\n        this._renderNode(document.createTextNode(serializable));\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Render a TemplateResult in this part\r\n   *\r\n   * Checks if this template has already been rendered in this part before.\r\n   * If so, re-use that TemplateInstance\r\n   * If not, create a new TemplateInstance\r\n   */\r\n  _renderTemplateResult(templateResult) {\r\n    this.templateInstances = this.templateInstances || new Map();\r\n    let instance = this.templateInstances.get(templateResult.template);\r\n    if (!instance) {\r\n      instance = new TemplateInstance(\r\n        templateResult.template,\r\n        this.parentNode,\r\n        this.beforeNode,\r\n        this.afterNode\r\n      );\r\n      this.templateInstances.set(templateResult.template, instance);\r\n    }\r\n    if (this.node !== instance.fragment) {\r\n      this.clear();\r\n      this.parentNode.insertBefore(instance.fragment, this.afterNode);\r\n      this.node = instance.fragment;\r\n    }\r\n    instance.render(templateResult.values);\r\n  }\r\n\r\n  /**\r\n   * Render an iterable in this part\r\n   *\r\n   * Creates a part for each item in the iterable\r\n   * Render each iterable value in a part\r\n   */\r\n  _renderIterable(iterable) {\r\n    if (this.node !== iterableNode) {\r\n      this.clear();\r\n      this.node = iterableNode;\r\n      if (!this.iterableParts) {\r\n        this.iterableParts = [];\r\n      } else {\r\n        this.iterableParts.length = 0;\r\n      }\r\n    }\r\n\r\n    let index = 0;\r\n    let before = this.afterNode\r\n      ? this.afterNode.previousSibling\r\n      : this.parentNode.lastChild;\r\n    let after;\r\n    const parent = this.parentNode;\r\n    for (const value of iterable) {\r\n      let part = this.iterableParts[index];\r\n      if (part === undefined) {\r\n        after = document.createTextNode('');\r\n        this.parentNode.insertBefore(after, this.afterNode);\r\n        part = new NodePart({ before, after, parent });\r\n        this.iterableParts.push(part);\r\n        before = after;\r\n      }\r\n      part.render(value);\r\n      index++;\r\n    }\r\n    if (index === 0) {\r\n      moveNodes(this.parentNode, this.beforeNode, this.afterNode);\r\n    } else if (index < this.iterableParts.length) {\r\n      const lastPart = this.iterableParts[index - 1];\r\n      moveNodes(this.parentNode, lastPart.afterNode, this.afterNode);\r\n    }\r\n    this.iterableParts.length = index;\r\n  }\r\n\r\n  /**\r\n   * Render a DOM node in this part\r\n   */\r\n  _renderNode(node) {\r\n    // If we are not already rendering this node\r\n    if (this.node !== node) {\r\n      this.clear();\r\n      this.parentNode.insertBefore(node, this.afterNode);\r\n      this.node = node;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Render the result of a promise in this part\r\n   */\r\n  _renderPromise(promise) {\r\n    if (this.promise !== promise) {\r\n      this.promise = promise;\r\n      // When the promise resolves, render the result of that promise\r\n      promise.then(value => {\r\n        // Render the promise result only if the last rendered value was the promise\r\n        if (this.promise === promise) {\r\n          this.promise = undefined;\r\n          this.render(value);\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clear out the content of this NodePart\r\n   *\r\n   * If the current node is part of a DocumentFragment (this NodePart rendered a TemplateResult)\r\n   * The current content is moved back into that fragment to be used again if the same fragment is rendered\r\n   * Otherwise, the current content is removed from the DOM permanently\r\n   */\r\n  clear() {\r\n    moveNodes(\r\n      this.parentNode,\r\n      this.beforeNode,\r\n      this.afterNode,\r\n      this.node instanceof DocumentFragment && this.node\r\n    );\r\n    this.node = emptyNode;\r\n  }\r\n}\r\n\r\n// The node in the CommentPart constructor must be a CommentNode\r\nexport class CommentPart {\r\n  constructor({ node }) {\r\n    this.node = node;\r\n  }\r\n\r\n  render(value) {\r\n    this.node.textContent = value;\r\n  }\r\n}\r\n\r\nexport class AttributePart {\r\n  constructor({ node, attribute }) {\r\n    this.node = node;\r\n    switch (attribute[0]) {\r\n    case '.':\r\n      this._render = this._renderProperty;\r\n      break;\r\n    case '?':\r\n      this._render = this._render || this._renderBoolean;\r\n      break;\r\n    case '@':\r\n      this._render = this._render || this._renderEvent;\r\n      this.node.removeAttribute(attribute);\r\n      this.name = attribute.slice(1);\r\n      break;\r\n    default:\r\n      this._render = this._renderAttribute;\r\n      this.name = attribute;\r\n    }\r\n  }\r\n\r\n  render(value) {\r\n    if (isDirective(value)) {\r\n      value(this);\r\n    } else if (value !== noChange) {\r\n      this._render(value);\r\n    }\r\n  }\r\n\r\n  _renderProperty(value) {\r\n    this.node[this.name] = value;\r\n  }\r\n\r\n  _renderBoolean(boolean) {\r\n    if (this.value !== !!boolean) {\r\n      boolean\r\n        ? this.node.setAttribute(this.name, '')\r\n        : this.node.removeAttribute(this.name);\r\n      this.value = !!boolean;\r\n    }\r\n  }\r\n\r\n  _renderEvent(listener) {\r\n    if (this.value !== listener) {\r\n      this.node.removeEventListener(this.name, this.value);\r\n      this.node.addEventListener(this.name, listener);\r\n      this.value = listener;\r\n    }\r\n  }\r\n\r\n  _renderAttribute(string) {\r\n    if (this.value !== string) {\r\n      this.node.setAttribute(this.name, string);\r\n      this.value = string;\r\n    }\r\n  }\r\n}\r\n","import { NodePart } from './parts.js';\r\n\r\n// A lookup map for NodeParts that represent the content of a render target\r\nconst nodeParts = new WeakMap();\r\n\r\n/**\r\n * Render content into a target node\r\n *\r\n * @param {any} content\r\n *   Any content you wish to render. Usually a template string literal tagged with the `html` function\r\n * @param {Node} target\r\n *   An HTML Node that you wish to render the content into.\r\n *   The content will become the sole content of the target node.\r\n */\r\nexport const render = (content, target) => {\r\n  // Check if the target has a NodePart that represents its content\r\n  let part = nodeParts.get(target);\r\n  if (!part) {\r\n    // If it does not, create a new NodePart\r\n    part = new NodePart({ parent: target });\r\n    nodeParts.set(target, part);\r\n  }\r\n  // Task the NodePart of this target to render the content\r\n  part.render(content);\r\n};\r\n","import { TemplateResult } from './templates.js';\r\n\r\n/**\r\n * Tagging function to tag JavaScript template string literals as HTML\r\n *\r\n * @return {TemplateResult}\r\n *   The strings and values of the template string wrapped in a TemplateResult object\r\n */\r\nexport const html = (strings, ...values) => {\r\n  return new TemplateResult(strings, values);\r\n};\r\n","export const dateFormat = epuch => {\r\n  let date = new Date(0);\r\n  date.setUTCSeconds(epuch);\r\n  return timeSince(date);\r\n};\r\n\r\nexport const actualDate = epuch => {\r\n  let date = new Date(0);\r\n  date.setUTCSeconds(epuch);\r\n  const ye = new Intl.DateTimeFormat('en', { year: 'numeric' }).format(date);\r\n  const mo = new Intl.DateTimeFormat('en', { month: 'long' }).format(date);\r\n  const da = new Intl.DateTimeFormat('en', { day: '2-digit' }).format(date);\r\n  return [dateFormat(epuch), `${da} ${mo} ${ye}`];\r\n};\r\n\r\nfunction timeSince(date) {\r\n  const seconds = Math.floor((new Date() - date) / 1000);\r\n\r\n  let interval = Math.floor(seconds / 31536000);\r\n\r\n  if (interval > 1) {\r\n    return interval + ' years ago';\r\n  }\r\n  interval = Math.floor(seconds / 2592000);\r\n  if (interval > 1) {\r\n    return interval + ' months ago';\r\n  }\r\n  interval = Math.floor(seconds / 86400);\r\n  if (interval > 1) {\r\n    return interval + ' days ago';\r\n  }\r\n  interval = Math.floor(seconds / 3600);\r\n  if (interval > 1) {\r\n    return interval + ' hours ago';\r\n  }\r\n  interval = Math.floor(seconds / 60);\r\n  if (interval > 1) {\r\n    return interval + ' minutes ago';\r\n  }\r\n  return Math.floor(seconds) + ' seconds ago';\r\n}\r\n","import { html } from \"@arish-shah/amp\";\r\nimport { dateFormat } from \"../util/date\";\r\n\r\nconst AllPosts = posts => html`\r\n  <ol>\r\n    ${posts.map(\r\n      post =>\r\n        html`\r\n          <li>${Item(post)}</li>\r\n        `\r\n    )}\r\n  </ol>\r\n`;\r\n\r\nexport const Item = post => {\r\n  post = post.data;\r\n  let titleURL = new URL(post.url);\r\n  titleURL =\r\n    titleURL.hostname.indexOf(\"www\") > -1\r\n      ? titleURL.hostname.substring(4)\r\n      : titleURL.hostname;\r\n\r\n  let awards = null;\r\n  if (+post.total_awards_received > 0) {\r\n    awards = html`\r\n      <span>|</span>\r\n      <span>${post.total_awards_received}🎖</span>\r\n    `;\r\n  }\r\n\r\n  let commentURL = post.permalink;\r\n  let index = commentURL.indexOf(\"/comments/\");\r\n  commentURL = commentURL.substring(index);\r\n\r\n  let createdDate = dateFormat(post.created_utc);\r\n\r\n  return html`\r\n    <div id=\"title\">\r\n      <a href=${post.url}>${post.title}</a>\r\n      <span id=\"url\">(${titleURL})</span>\r\n    </div>\r\n    <div id=\"meta\">\r\n      <span>${post.ups} upvotes</span>\r\n      <span>\r\n        by\r\n        <b><a href=${`#/user/${post.author}`}>${post.author}</a></b>\r\n      </span>\r\n      <span>${createdDate}</span>\r\n      <span></span>\r\n      <span>|</span>\r\n      <span>\r\n        <a href=${`#${commentURL}`}>\r\n          ${post.num_comments} comments\r\n        </a>\r\n      </span>\r\n      ${awards}\r\n    </div>\r\n  `;\r\n};\r\n\r\nexport default AllPosts;\r\n","import { html } from \"@arish-shah/amp\";\r\nimport { Item } from \"./Posts\";\r\n\r\nconst Comments = response => {\r\n  const info = response[0].data.children[0];\r\n\r\n  return html`\r\n    <div id=\"post-title\">\r\n      ${Item(info)}\r\n    </div>\r\n    <div id=\"comments\">\r\n      ${response[1].data.children.map(comment => Comment(comment.data))}\r\n    </div>\r\n  `;\r\n};\r\n\r\nconst Comment = info => {\r\n  let replies;\r\n  let moreText = \"[—]\";\r\n  if (info.replies) {\r\n    moreText = `[${info.replies.data.children.length}]`;\r\n    replies = info.replies.data.children.map(reply => {\r\n      if (reply.data.author && reply.data.body) return Comment(reply.data);\r\n    });\r\n  }\r\n\r\n  return html`\r\n    <div id=\"comment\">\r\n      <span>${moreText}</span>\r\n      <b><a href=${`#/user/${info.author}`}>${info.author}</a></b>\r\n      <span>${info.ups} upvotes</span>\r\n      <p>${info.body}</p>\r\n      <div id=\"replies\">\r\n        ${replies}\r\n      </div>\r\n    </div>\r\n  `;\r\n};\r\n\r\nexport default Comments;\r\n","import { html } from \"@arish-shah/amp\";\r\nimport { actualDate } from \"../util/date\";\r\n\r\nconst User = info => {\r\n  const [actual, relative] = actualDate(info.created_utc);\r\n  return html`\r\n    <div id=\"user\">\r\n      <div class=\"img-wrapper\">\r\n        <img src=${info.icon_img} alt=\"Not Found\" />\r\n      </div>\r\n      <div id=\"details\">\r\n        <div id=\"name\">\r\n          <b>${info.name}</b>\r\n        </div>\r\n        <dl>\r\n          <dt>Joined</dt>\r\n          <dd>${relative} (${actual})</dd>\r\n        </dl>\r\n        <dl>\r\n          <dt>Karma</dt>\r\n          <dd>\r\n            Comment: ${info.comment_karma} <br />\r\n            Link: ${info.link_karma}\r\n          </dd>\r\n        </dl>\r\n      </div>\r\n    </div>\r\n  `;\r\n};\r\n\r\nexport default User;\r\n","import { html } from \"@arish-shah/amp\";\r\n\r\nconst About = html`\r\n  <div id=\"about\">\r\n    <h3>About</h3>\r\n    <p>This application is built using amp-js.</p>\r\n    <p>\r\n      amp-js is a front-end JavaScript library we built as a part of our Major Project.\r\n    </p>\r\n    <p>\r\n      The source code of this application can be found \r\n      <a \r\n        href=\"https://github.com/Arish-Shah/amp-reddit-client\"\r\n        target=\"_blank\"\r\n        rel=\"noopener noreferrer\"\r\n      >here</a>.\r\n    </p>\r\n  </about>\r\n`;\r\n\r\nexport default About;\r\n","import { html } from \"@arish-shah/amp\";\r\n\r\nexport const Loading = html`\r\n  <div id=\"loader\">Loading...</div>\r\n`;\r\n\r\nexport const Error = error => html`\r\n  <div id=\"loading\">${error}</div>\r\n`;\r\n","export const getData = async url => {\r\n  let response = localStorage.getItem(url);\r\n\r\n  if (!response) {\r\n    response = await fetch(url);\r\n    response = await response.json();\r\n    localStorage.setItem(url, JSON.stringify(response));\r\n    return response;\r\n  }\r\n\r\n  return JSON.parse(response);\r\n};\r\n","import { render } from \"@arish-shah/amp\";\r\n\r\nimport Posts from \"./components/Posts\";\r\nimport Comments from \"./components/Comments\";\r\nimport User from \"./components/User\";\r\nimport About from \"./components/About\";\r\nimport { Error, Loading } from \"./components/Display\";\r\nimport { getData } from \"./util/cache\";\r\n\r\nconst root = document.getElementById(\"root\");\r\n\r\nconst hashChangeHandler = () => {\r\n  render(Loading, root);\r\n  const hash = window.location.hash.slice(2);\r\n\r\n  if (hash === \"\") {\r\n    getPosts(\"hot\");\r\n  } else if (hash.indexOf(\"comments\") > -1) {\r\n    getComments(hash);\r\n  } else if (hash.indexOf(\"user\") > -1) {\r\n    getUser(hash);\r\n  } else if (hash.indexOf(\"about\") > -1) {\r\n    render(About, root);\r\n  } else {\r\n    getPosts(`r/${hash}`);\r\n  }\r\n};\r\n\r\nconst getPosts = async name => {\r\n  try {\r\n    let response = await getData(`https://www.reddit.com/${name}.json`);\r\n    render(Posts(response.data.children), root);\r\n  } catch (e) {\r\n    render(Error(e), root);\r\n  }\r\n};\r\n\r\nconst getComments = async hash => {\r\n  try {\r\n    let response = await getData(`https://www.reddit.com/${hash}.json`);\r\n    render(Comments(response), root);\r\n  } catch (e) {\r\n    render(Error(e), root);\r\n  }\r\n};\r\n\r\nconst getUser = async hash => {\r\n  try {\r\n    let response = await getData(`https://www.reddit.com/${hash}/about.json`);\r\n    render(User(response.data), root);\r\n  } catch (e) {\r\n    render(Error(e), root);\r\n  }\r\n};\r\n\r\nwindow.addEventListener(\"hashchange\", hashChangeHandler);\r\nwindow.addEventListener(\"load\", hashChangeHandler);\r\ndocument.getElementById(\"refresh\").addEventListener(\"click\", () => {\r\n  localStorage.clear();\r\n  hashChangeHandler();\r\n});\r\ndocument.getElementById(\"home\").addEventListener(\"click\", () => {\r\n  window.location.hash = \"#/\";\r\n  hashChangeHandler();\r\n});\r\n"]}