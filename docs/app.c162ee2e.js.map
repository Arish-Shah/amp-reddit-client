{"version":3,"sources":["src/index.js","src/template/markers.js","src/parser/node-walker.js","src/parser/template-parser.js","src/template/templates.js","src/parser/dom.js","src/parser/directive.js","src/template/parts.js","src/lib/render.js","src/lib/html.js","src/util/index.js","src/lib/component.js","util/date.js","pages/Feed.js","pages/About.js","pages/User.js","util/copy.js","util/parse.js","components/Comments.js","pages/Comments.js","components/Navbar.js","components/Progress.js","util/getData.js","app.js"],"names":["marker","Math","random","toString","slice","padStart","attributeMarker","IEStyleMarker","commentMarker","failMarker","nodeMarker","lastAttributeNameRegex","filter","findParts","strings","template","parts","recursiveSearch","node","path","nodeType","nodeValue","push","type","CommentPart","NodePart","hasAttribute","Error","removeAttribute","dynamicAttributes","call","attributes","attribute","value","length","getAttribute","i","exec","AttributePart","children","childNodes","concat","content","attributeMarkerTag","commentMarkerTag","nodeMarkerTag","attributeContext","commentContext","nodeContext","unchangedContext","markers","Map","set","parseContext","string","openComment","context","lastIndexOf","commentClosed","indexOf","closeTag","parseTemplate","html","lastStringIndex","currentContext","get","join","buildTemplate","document","createElement","innerHTML","templateMap","Template","element","TemplateResult","values","_template","undefined","TemplateInstance","parent","before","after","fragment","cloneNode","map","part","forEach","nodeIndex","previousSibling","nextSibling","parentNode","index","render","moveNodes","oldParent","previous","move","nextNode","newParent","nodeToMove","firstChild","Node","insertBefore","removeChild","directives","WeakMap","isDirective","has","isSerializable","isIterable","nonPrimitive","Array","isArray","Symbol","iterator","noChange","emptyNode","iterableNode","beforeNode","afterNode","clear","_renderText","_renderTemplateResult","_renderIterable","_renderNode","then","_renderPromise","String","promise","serializable","textContent","createTextNode","templateResult","templateInstances","instance","iterable","iterableParts","lastChild","lastPart","DocumentFragment","_render","_renderProperty","_renderBoolean","_renderEvent","name","_renderAttribute","boolean","setAttribute","listener","removeEventListener","addEventListener","nodeParts","target","validate","id","definition","createData","data","state","Object","keys","some","JSON","parse","stringify","callLifeCycle","method","getProps","props","obj","component","generate","nodes","oncreate","onmount","onupdate","methods","components","proxyHandler","key","Proxy","flag","updateChildren","lifeCycle","comp","querySelectorAll","attr","mCopy","methodNames","bind","dateFormat","epuch","date","Date","timeSince","setUTCSeconds","actualDate","ye","Intl","DateTimeFormat","year","format","mo","month","da","day","seconds","floor","interval","FeedPage","PostItem","Amp","title","ups","author","created_utc","num_comments","url","permalink","domain","post","posts","AboutPage","UserPage","link_karma","comment_karma","subreddit","details","oldURL","public_description","copy","text","replace","Comments","Replies","body_html","replyBody","className","replies","reply","CommentsPage","postDetails","commentDetails","selftext_html","selftext","Navbar","hash","window","location","link","classList","add","remove","Progress","getData","response","fetch","json","getURL","reddit","Root","router","console","log","cache","current","loading","updateCache","catch","error","getPage","progress"],"mappings":"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","file":"app.c162ee2e.js","sourceRoot":"..\\src","sourcesContent":["import { render } from './lib/render.js';\r\nimport { html } from './lib/html.js';\r\nimport { component } from './lib/component.js';\r\n\r\nexport default {\r\n  component\r\n};\r\n\r\nexport { render, html };\r\n","export const marker = Math.random().toString(36).slice(2).padStart(10, '0');\r\nexport const attributeMarker = `font-family:${marker}`;\r\nexport const IEStyleMarker = `font-family: ${marker};`;\r\nexport const commentMarker = `comment-${marker}`;\r\nexport const failMarker = `node-${marker}`;\r\nexport const nodeMarker = `${failMarker}\" ${failMarker} `;\r\n","import {\r\n  IEStyleMarker,\r\n  attributeMarker,\r\n  commentMarker,\r\n  nodeMarker,\r\n  failMarker\r\n} from '../template/markers.js';\r\nimport { AttributePart, CommentPart, NodePart } from '../template/parts.js';\r\n\r\n// eslint-disable-next-line no-control-regex\r\nconst lastAttributeNameRegex = /[ \\x09\\x0a\\x0c\\x0d]([^\\0-\\x1F\\x7F-\\x9F \\x09\\x0a\\x0c\\x0d\"'>=/]+)[ \\x09\\x0a\\x0c\\x0d]*=$/;\r\nconst filter = [].filter;\r\n\r\nexport const findParts = (strings, template) => {\r\n  let parts = [];\r\n\r\n  // Recursive depth-first tree traversal that finds nodes in the subtree of `node` that are parts\r\n  // The path is an array of incides of childNodes to get to this node\r\n  const recursiveSearch = (node, path) => {\r\n    // If the node is a CommentNode, check if it is a marker for a CommentPart or NodePart\r\n    if (node.nodeType === 8) {\r\n      if (node.nodeValue === commentMarker) {\r\n        parts.push({ type: CommentPart, path });\r\n      } else if (node.nodeValue === nodeMarker) {\r\n        parts.push({ type: NodePart, path });\r\n      }\r\n      // If it is not a marker for a Part, it is a regular comment\r\n    } else {\r\n      // If the node is an ElementNode, it may contain AttributeParts\r\n      if (node.nodeType === 1) {\r\n        // If the node has the failMarker, the context was incorrectly recognised as a Node context\r\n        // This happens when an attribute literal contains the '>' character\r\n        // There is no way to fix this, so throw an error to alert the developer to fix it\r\n        if (node.hasAttribute(failMarker)) {\r\n          throw new Error(\r\n            \"The '>' character is not allowed in attribute literals. Replace with '&gt;\"\r\n          );\r\n        }\r\n        // If the node has any AttributeParts, it will have the attributeMarker attribute set\r\n        if (node.hasAttribute(attributeMarker)) {\r\n          node.removeAttribute(attributeMarker);\r\n\r\n          // Find the number of dynamic attributes by checking all attribute values against the attributeMarker\r\n          let dynamicAttributes = filter.call(\r\n            node.attributes,\r\n            (attribute) => attribute.value === attributeMarker\r\n          ).length;\r\n\r\n          // If the node has the 'style' attribute, test against IEStyleMarker to check if the attribute is dynamic\r\n          if (node.getAttribute('style') === IEStyleMarker) {\r\n            dynamicAttributes += 1;\r\n          }\r\n\r\n          for (let i = 0; i < dynamicAttributes; i++) {\r\n            // Find the name of this AttributePart using the lastAttributeNameRegex on the string before this part\r\n            const attribute = lastAttributeNameRegex.exec(\r\n              strings[parts.length]\r\n            )[1];\r\n            parts.push({ type: AttributePart, path, attribute });\r\n          }\r\n        }\r\n      }\r\n\r\n      // Recursively search all children of this node\r\n      const children = node.childNodes;\r\n      const length = children.length;\r\n      for (let i = 0; i < length; i++) {\r\n        recursiveSearch(children[i], path.concat([i]));\r\n      }\r\n    }\r\n  };\r\n\r\n  // Recursively search the content of the template for parts\r\n  recursiveSearch(template.content, []);\r\n\r\n  // If we found less parts than we should, something went wrong\r\n  // Most likely a double attribute assignment was dropped by the HTML parser\r\n  // Throw an error and warn the developer\r\n  if (parts.length < strings.length - 1) {\r\n    throw new Error(\r\n      \"Double attribute assignments are not allowed: '<div a=${0} a=${0}>'\"\r\n    );\r\n  }\r\n  return parts;\r\n};\r\n","import {\r\n  attributeMarker,\r\n  commentMarker,\r\n  nodeMarker\r\n} from '../template/markers.js';\r\n\r\n/**\r\n * The second marker is to add a boolean attribute to the element\r\n * This is to easily test if a node has dynamic attributes by checking against that attribute\r\n */\r\nexport const attributeMarkerTag = `${attributeMarker} ${attributeMarker}`;\r\n\r\n/* The space at the end is necessary, to avoid accidentally closing comments with `<!-->` */\r\nexport const commentMarkerTag = `--><!--${commentMarker}--><!-- `;\r\n\r\n/**\r\n * The extra content at the end is to add a flag to an element when\r\n * a nodeMarkerTag is inserted as an attribute due to an attribute containing `>`\r\n */\r\nexport const nodeMarkerTag = `<!--${nodeMarker}-->`;\r\n\r\nexport const attributeContext = {};\r\nexport const commentContext = {};\r\nexport const nodeContext = {};\r\nexport const unchangedContext = {};\r\n\r\nconst markers = new Map();\r\nmarkers.set(attributeContext, attributeMarkerTag);\r\nmarkers.set(commentContext, commentMarkerTag);\r\nmarkers.set(nodeContext, nodeMarkerTag);\r\n\r\nexport const parseContext = (string) => {\r\n  const openComment = string.lastIndexOf('<!--');\r\n  const closeComment = string.indexOf('-->', openComment + 1);\r\n  const commentClosed = closeComment > -1;\r\n  let context;\r\n  if (openComment > -1 && !commentClosed) {\r\n    context = commentContext;\r\n  } else {\r\n    const closeTag = string.lastIndexOf('>');\r\n    const openTag = string.indexOf('<', closeTag + 1);\r\n    if (openTag > -1) {\r\n      context = attributeContext;\r\n    } else {\r\n      if (closeTag > -1) {\r\n        context = nodeContext;\r\n      } else {\r\n        context = unchangedContext;\r\n      }\r\n    }\r\n  }\r\n  return { commentClosed, context };\r\n};\r\n\r\nexport const parseTemplate = (strings) => {\r\n  const html = [];\r\n  const lastStringIndex = strings.length - 1;\r\n  let currentContext = nodeContext;\r\n  for (let i = 0; i < lastStringIndex; i++) {\r\n    const string = strings[i];\r\n    const { commentClosed, context } = parseContext(string);\r\n    if (\r\n      (currentContext !== commentContext || commentClosed) &&\r\n      context !== unchangedContext\r\n    ) {\r\n      currentContext = context;\r\n    }\r\n    if (currentContext === attributeContext && string.slice(-1) !== '=') {\r\n      throw new Error('Only bare attribute parts are allowed: `<div a=${0}>`');\r\n    }\r\n    html.push(string + markers.get(currentContext));\r\n  }\r\n\r\n  html.push(strings[lastStringIndex]);\r\n  return html.join('');\r\n};\r\n\r\nexport const buildTemplate = (strings) => {\r\n  const template = document.createElement('template');\r\n  template.innerHTML = parseTemplate(strings);\r\n  return template;\r\n};\r\n","import { findParts } from '../parser/node-walker.js';\r\nimport { buildTemplate } from '../parser/template-parser.js';\r\nimport { NodePart } from './parts.js';\r\n/**\r\n * A map that contains all the template literals we have seen before\r\n * It maps from a String array to a Template object\r\n *\r\n * @typedef {Map.<[String], Template>}\r\n */\r\nconst templateMap = new Map();\r\n\r\n/**\r\n * Template holds the DocumentFragment that is to be used as a prototype for instances of this template\r\n * When a template is to be rendered in a new location, a clone will be made from this\r\n *\r\n * @prop {[String]} strings\r\n *   The unique string array that this template represents\r\n * @prop {[DocumentFragment]} element\r\n *   The DocumentFragment that can be cloned to make instances of this template\r\n * @prop {[Object]} parts\r\n *   The descriptions of the parts in this Template. Each part has a path which defines a unique location in the\r\n *   template DOM tree, a type which defines the part type, and an optional attribute which defines the name of\r\n *   the attribute this part represents.\r\n */\r\nexport class Template {\r\n  constructor(strings) {\r\n    this.strings = strings;\r\n    this.element = buildTemplate(strings);\r\n    this.parts = findParts(strings, this.element);\r\n  }\r\n}\r\n\r\n/**\r\n * TemplateResult holds the strings and values that result from a tagged template string literal.\r\n * TemplateResult can find and return a unique Template object that represents its tagged template string literal.\r\n */\r\nexport class TemplateResult {\r\n  constructor(strings, values) {\r\n    this.strings = strings;\r\n    this.values = values;\r\n    this._template = undefined;\r\n  }\r\n\r\n  /**\r\n   * @returns {Template}\r\n   *   A unique Template object..\r\n   *   Each evaluation of html`..` yields a new TemplateResult object, but they will have the same\r\n   *   Template object when they are the result of the same html`..` literal.\r\n   *\r\n   */\r\n  get template() {\r\n    if (this._template) {\r\n      return this._template;\r\n    }\r\n    let template = templateMap.get(this.strings);\r\n    if (!template) {\r\n      template = new Template(this.strings);\r\n      templateMap.set(this.strings, template);\r\n    }\r\n    this._template = template;\r\n    return template;\r\n  }\r\n}\r\n\r\n/**\r\n * An instance of a template that can be rendered somewhere\r\n *\r\n * @prop {Template} template\r\n *   The unique Template object that this is an instance of\r\n * @prop {[DocumentFragment]} fragment\r\n *   The DocumentFragment that is a clone of the Template's prototype DocumentFragment\r\n * @prop {[AttributePart|CommentPart|NodePart|]} parts\r\n *   The parts that render into this template instance\r\n */\r\nexport class TemplateInstance {\r\n  constructor(template, parent, before, after) {\r\n    this.template = template;\r\n    this.fragment = template.element.content.cloneNode(true);\r\n\r\n    // Create new Parts based on the part definitions set on the Template\r\n    const parts = this.template.parts.map((part) => {\r\n      let node = this.fragment;\r\n      part.path.forEach((nodeIndex) => {\r\n        node = node.childNodes[nodeIndex];\r\n      });\r\n      part.node = node;\r\n      if (part.type === NodePart) {\r\n        if (part.path.length === 1) {\r\n          part.parent = parent;\r\n          part.before = node.previousSibling || before;\r\n          part.after = node.nextSibling || after;\r\n        } else {\r\n          part.parent = node.parentNode;\r\n        }\r\n      }\r\n      return part;\r\n    });\r\n    this.parts = parts.map((part) => new part.type(part));\r\n  }\r\n\r\n  /**\r\n   * Render values into the parts of this TemplateInstance\r\n   *\r\n   * @param {[any]} values\r\n   *   An array of values to render into the parts. There should be one value per part\r\n   */\r\n  render(values) {\r\n    this.parts.map((part, index) => part.render(values[index]));\r\n  }\r\n}\r\n","/**\r\n * Move nodes from to a new parent, or remove them from the old parent if no new parent is given\r\n */\r\nexport const moveNodes = (\r\n  oldParent,\r\n  previous = null,\r\n  after = null,\r\n  newParent,\r\n  before\r\n) => {\r\n  let nodeToMove = previous ? previous.nextSibling : oldParent.firstChild;\r\n  if (nodeToMove !== null) {\r\n    // If the new Parent is a Node, we move the nodes instead of removing them\r\n    let move;\r\n    if (newParent instanceof Node) {\r\n      move = () => newParent.insertBefore(nodeToMove, before);\r\n    } else {\r\n      move = () => oldParent.removeChild(nodeToMove);\r\n    }\r\n    let nextNode;\r\n    while (nodeToMove !== after) {\r\n      nextNode = nodeToMove.nextSibling;\r\n      move(nodeToMove);\r\n      nodeToMove = nextNode;\r\n    }\r\n  }\r\n};\r\n","const directives = new WeakMap();\r\n\r\nexport const isDirective = (value) => directives.has(value);\r\n\r\nexport const directive = (directive) => {\r\n  directives.set(directive, null);\r\n  return directive;\r\n};\r\n","/* eslint-disable no-fallthrough */\r\n/* eslint-disable indent */\r\nimport { TemplateResult, TemplateInstance } from './templates.js';\r\nimport { moveNodes } from '../parser/dom.js';\r\nimport { isDirective } from '../parser/directive.js';\r\n\r\nexport const isSerializable = (value) =>\r\n  typeof value === 'string' ||\r\n  typeof value === 'number' ||\r\n  typeof value === 'boolean';\r\nexport const isIterable = (nonPrimitive) =>\r\n  Array.isArray(nonPrimitive) || nonPrimitive[Symbol.iterator];\r\n\r\n// A flag that signals that no render should happen\r\nexport const noChange = {};\r\n\r\n// A node type for empty parts\r\nconst emptyNode = {};\r\n\r\n// A node type for NodeParts that contain an iterable\r\nconst iterableNode = {};\r\n\r\nexport class NodePart {\r\n  // node OR parent _must_ be defined\r\n  // If a node is defined, this NodePart represents the position of that node in the tree\r\n  // If a only a parent is defined, this NodePart represents the content of the parent\r\n  constructor({ node, parent, before, after }) {\r\n    this.node = node || emptyNode;\r\n    this.value = noChange;\r\n\r\n    this.parentNode = parent || (node && node.parentNode);\r\n    this.beforeNode = before || (node && node.previousSibling);\r\n    this.afterNode = after || (node && node.nextSibling);\r\n  }\r\n\r\n  render(value) {\r\n    if (isDirective(value)) {\r\n      value(this);\r\n    } else if (value !== noChange) {\r\n      if (value == null) {\r\n        this.clear();\r\n      } else if (isSerializable(value)) {\r\n        this._renderText(value);\r\n      } else if (value instanceof TemplateResult) {\r\n        this._renderTemplateResult(value);\r\n      } else if (isIterable(value)) {\r\n        this._renderIterable(value);\r\n      } else if (value instanceof Node) {\r\n        this._renderNode(value);\r\n      } else if (value.then !== undefined) {\r\n        this._renderPromise(value);\r\n        // Return here because we do not want to set `this.value` with the promise\r\n        return;\r\n      } else {\r\n        value = String(value);\r\n        this._renderText(value);\r\n      }\r\n      this.promise = undefined;\r\n      this.value = value;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Render a serializable value in this part\r\n   *\r\n   * Strings, Numbers, and Booleans are serializable\r\n   * Serializable values are rendered as textContent of a TextNode\r\n   */\r\n  _renderText(serializable) {\r\n    // If the text is not equal to the previously rendered value\r\n    if (this.value !== serializable) {\r\n      // If the node is a TextNode, replace the content of that node\r\n      // Otherwise, create a new TextNode with the primitive value as content\r\n      if (this.node.nodeType === 3) {\r\n        this.node.textContent = serializable;\r\n      } else {\r\n        this._renderNode(document.createTextNode(serializable));\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Render a TemplateResult in this part\r\n   *\r\n   * Checks if this template has already been rendered in this part before.\r\n   * If so, re-use that TemplateInstance\r\n   * If not, create a new TemplateInstance\r\n   */\r\n  _renderTemplateResult(templateResult) {\r\n    this.templateInstances = this.templateInstances || new Map();\r\n    let instance = this.templateInstances.get(templateResult.template);\r\n    if (!instance) {\r\n      instance = new TemplateInstance(\r\n        templateResult.template,\r\n        this.parentNode,\r\n        this.beforeNode,\r\n        this.afterNode\r\n      );\r\n      this.templateInstances.set(templateResult.template, instance);\r\n    }\r\n    if (this.node !== instance.fragment) {\r\n      this.clear();\r\n      this.parentNode.insertBefore(instance.fragment, this.afterNode);\r\n      this.node = instance.fragment;\r\n    }\r\n    instance.render(templateResult.values);\r\n  }\r\n\r\n  /**\r\n   * Render an iterable in this part\r\n   *\r\n   * Creates a part for each item in the iterable\r\n   * Render each iterable value in a part\r\n   */\r\n  _renderIterable(iterable) {\r\n    if (this.node !== iterableNode) {\r\n      this.clear();\r\n      this.node = iterableNode;\r\n      if (!this.iterableParts) {\r\n        this.iterableParts = [];\r\n      } else {\r\n        this.iterableParts.length = 0;\r\n      }\r\n    }\r\n\r\n    let index = 0;\r\n    let before = this.afterNode\r\n      ? this.afterNode.previousSibling\r\n      : this.parentNode.lastChild;\r\n    let after;\r\n    const parent = this.parentNode;\r\n    for (const value of iterable) {\r\n      let part = this.iterableParts[index];\r\n      if (part === undefined) {\r\n        after = document.createTextNode('');\r\n        this.parentNode.insertBefore(after, this.afterNode);\r\n        part = new NodePart({ before, after, parent });\r\n        this.iterableParts.push(part);\r\n        before = after;\r\n      }\r\n      part.render(value);\r\n      index++;\r\n    }\r\n    if (index === 0) {\r\n      moveNodes(this.parentNode, this.beforeNode, this.afterNode);\r\n    } else if (index < this.iterableParts.length) {\r\n      const lastPart = this.iterableParts[index - 1];\r\n      moveNodes(this.parentNode, lastPart.afterNode, this.afterNode);\r\n    }\r\n    this.iterableParts.length = index;\r\n  }\r\n\r\n  /**\r\n   * Render a DOM node in this part\r\n   */\r\n  _renderNode(node) {\r\n    // If we are not already rendering this node\r\n    if (this.node !== node) {\r\n      this.clear();\r\n      this.parentNode.insertBefore(node, this.afterNode);\r\n      this.node = node;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Render the result of a promise in this part\r\n   */\r\n  _renderPromise(promise) {\r\n    if (this.promise !== promise) {\r\n      this.promise = promise;\r\n      // When the promise resolves, render the result of that promise\r\n      promise.then((value) => {\r\n        // Render the promise result only if the last rendered value was the promise\r\n        if (this.promise === promise) {\r\n          this.promise = undefined;\r\n          this.render(value);\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clear out the content of this NodePart\r\n   *\r\n   * If the current node is part of a DocumentFragment (this NodePart rendered a TemplateResult)\r\n   * The current content is moved back into that fragment to be used again if the same fragment is rendered\r\n   * Otherwise, the current content is removed from the DOM permanently\r\n   */\r\n  clear() {\r\n    moveNodes(\r\n      this.parentNode,\r\n      this.beforeNode,\r\n      this.afterNode,\r\n      this.node instanceof DocumentFragment && this.node\r\n    );\r\n    this.node = emptyNode;\r\n  }\r\n}\r\n\r\n// The node in the CommentPart constructor must be a CommentNode\r\nexport class CommentPart {\r\n  constructor({ node }) {\r\n    this.node = node;\r\n  }\r\n\r\n  render(value) {\r\n    this.node.textContent = value;\r\n  }\r\n}\r\n\r\nexport class AttributePart {\r\n  constructor({ node, attribute }) {\r\n    this.node = node;\r\n    switch (attribute[0]) {\r\n      case ':':\r\n        this._render = this._renderProperty;\r\n      case '?':\r\n        this._render = this._render || this._renderBoolean;\r\n      case '@':\r\n        this._render = this._render || this._renderEvent;\r\n        this.node.removeAttribute(attribute);\r\n        this.name = attribute.slice(1);\r\n        break;\r\n      default:\r\n        this._render = this._renderAttribute;\r\n        this.name = attribute;\r\n    }\r\n  }\r\n\r\n  render(value) {\r\n    if (isDirective(value)) {\r\n      value(this);\r\n    } else if (value !== noChange) {\r\n      this._render(value);\r\n    }\r\n  }\r\n\r\n  _renderProperty(value) {\r\n    if (typeof value === 'undefined') {\r\n      throw new Error(`undefined cannot be assigned to \".${this.name}\"`);\r\n    }\r\n    this.node[this.name] = value;\r\n  }\r\n\r\n  _renderBoolean(boolean) {\r\n    if (this.value !== !!boolean) {\r\n      boolean\r\n        ? this.node.setAttribute(this.name, '')\r\n        : this.node.removeAttribute(this.name);\r\n      this.value = !!boolean;\r\n    }\r\n  }\r\n\r\n  _renderEvent(listener) {\r\n    if (typeof listener === 'undefined') {\r\n      throw new Error(`undefined cannot be assigned to \"@${this.name}\"`);\r\n    }\r\n    if (this.value !== listener) {\r\n      this.node.removeEventListener(this.name, this.value);\r\n      this.node.addEventListener(this.name, listener);\r\n      this.value = listener;\r\n    }\r\n  }\r\n\r\n  _renderAttribute(string) {\r\n    if (typeof string === 'undefined') {\r\n      throw new Error(`undefined cannot be assigned to \"${this.name}\"`);\r\n    }\r\n    if (this.value !== string) {\r\n      this.node.setAttribute(this.name, string);\r\n      this.value = string;\r\n    }\r\n  }\r\n}\r\n","import { NodePart } from '../template/parts.js';\r\n\r\n// A lookup map for NodeParts that represent the content of a render target\r\nconst nodeParts = new WeakMap();\r\n\r\n/**\r\n * Render content into a target node\r\n *\r\n * @param {any} content\r\n *   Any content you wish to render. Usually a template string literal tagged with the `html` function\r\n * @param {Node} target\r\n *   An HTML Node that you wish to render the content into.\r\n *   The content will become the sole content of the target node.\r\n */\r\nexport const render = (content, target) => {\r\n  // Check if the target has a NodePart that represents its content\r\n  let part = nodeParts.get(target);\r\n  if (!part) {\r\n    // If it does not, create a new NodePart\r\n    part = new NodePart({ parent: target });\r\n    nodeParts.set(target, part);\r\n  }\r\n  // Task the NodePart of this target to render the content\r\n  part.render(content);\r\n};\r\n","import { TemplateResult } from '../template/templates.js';\r\n\r\n/**\r\n * Tagging function to tag JavaScript template string literals as HTML\r\n *\r\n * @return {TemplateResult}\r\n *   The strings and values of the template string wrapped in a TemplateResult object\r\n */\r\nexport const html = (strings, ...values) => {\r\n  return new TemplateResult(strings, values);\r\n};\r\n","export const validate = (id, definition) => {\r\n  if (!id) {\r\n    throw new Error('Component name is not assigned');\r\n  }\r\n  if (id.indexOf('-') <= 0) {\r\n    throw new Error('Component name must contain a dash, e.g., amp-root');\r\n  }\r\n  if (!definition) {\r\n    throw new Error('Declare component definition');\r\n  }\r\n  if (!definition.template) {\r\n    throw new Error('template is required for creating components');\r\n  }\r\n  if (typeof definition.template !== 'function') {\r\n    throw new Error('template must be a function');\r\n  }\r\n};\r\n\r\nexport const getNodes = (name) => {\r\n  const nodes = document.querySelectorAll(name) || [];\r\n  return nodes;\r\n};\r\n\r\nexport const createData = (data) => {\r\n  let state = {};\r\n\r\n  if (data && Object.keys(data).length > 0) {\r\n    if (Object.keys(data).some((name) => typeof data[name] === 'function')) {\r\n      throw new Error('\"data\" property should not contain methods');\r\n    }\r\n\r\n    state = { ...JSON.parse(JSON.stringify(data)) };\r\n  }\r\n  return state;\r\n};\r\n\r\nexport const callLifeCycle = (method) => {\r\n  if (method) {\r\n    method();\r\n  }\r\n};\r\n\r\nexport const getProps = (props, node) => {\r\n  if (props && props.length) {\r\n    let obj = {};\r\n    props.forEach((name) => {\r\n      if (name in node) {\r\n        obj[name] = node[name];\r\n      }\r\n    });\r\n    return obj;\r\n  }\r\n  return undefined;\r\n};\r\n","import { render } from '../lib/render.js';\r\nimport {\r\n  validate,\r\n  createData,\r\n  callLifeCycle,\r\n  getProps\r\n} from '../util/index.js';\r\n\r\n/**\r\n * Create custom reusable components for usage in HTML\r\n * @param {string} id\r\n *   Name of the component.\r\n *   It mush contain a dash (-), e.g., amp-root\r\n * @param {Object} definition\r\n *   Definition of the component.\r\n *   This includes template, data, methods and props (if any)\r\n * @param {Function} definition.oncreate\r\n * @param {Function} definition.onmount\r\n * @param {Function} definition.onupdate\r\n * @param {Object} definition.data\r\n * @param {Object} definition.methods\r\n * @param {Array<Component>} definition.components\r\n * @param {Array<string>} definition.props\r\n * @param {TemplateResult} definition.template\r\n * @returns {{id, Function}}\r\n *   id of the components alongwith a function to generate it\r\n */\r\nexport const component = (id, definition) => {\r\n  const generate = (nodes) => {\r\n    validate(id, definition);\r\n    const {\r\n      oncreate,\r\n      onmount,\r\n      onupdate,\r\n      data,\r\n      methods,\r\n      props,\r\n      components,\r\n      template\r\n    } = definition;\r\n\r\n    nodes.forEach((node) => {\r\n      const proxyHandler = {\r\n        get: function (target, key) {\r\n          if (typeof target[key] === 'object' && target[key] !== null) {\r\n            return new Proxy(target[key], proxyHandler);\r\n          } else {\r\n            return target[key];\r\n          }\r\n        },\r\n        set: function (target, key, value) {\r\n          let flag = key in target;\r\n          target[key] = value;\r\n          if (flag) {\r\n            render(template.call(state), node);\r\n            updateChildren(components);\r\n            callLifeCycle(lifeCycle.onupdate);\r\n          }\r\n          return true;\r\n        }\r\n      };\r\n\r\n      /*  On re-render update children */\r\n      const updateChildren = (components) => {\r\n        if (components && components.length > 0) {\r\n          components.forEach((comp) => {\r\n            const isInDOM = document.querySelectorAll(comp.id).length > 0;\r\n            if (isInDOM) {\r\n              comp.generate();\r\n            }\r\n          });\r\n        }\r\n\r\n        const childNodes = node.querySelectorAll(id);\r\n        if (childNodes.length > 0) {\r\n          generate(childNodes);\r\n        }\r\n      };\r\n\r\n      // Create a copy of data for each element\r\n      let state = createData(data);\r\n      state.attr = (name) => node.getAttribute(name);\r\n      state = new Proxy(state, proxyHandler);\r\n\r\n      /* Go through methods and bind them, add them to state */\r\n      const mCopy = { ...methods };\r\n      if (mCopy) {\r\n        const methodNames = Object.keys(mCopy);\r\n        if (methodNames.some((name) => typeof mCopy[name] !== 'function')) {\r\n          throw new Error('\"methods\" property should not contain data');\r\n        }\r\n\r\n        if (methodNames.length > 0) {\r\n          methodNames.forEach((name) => {\r\n            state[name] = mCopy[name].bind(state);\r\n          });\r\n        }\r\n      }\r\n\r\n      /* Set the props to state.props variable */\r\n      state.props = getProps(props, node);\r\n\r\n      let lifeCycle = {};\r\n      if (oncreate) lifeCycle.oncreate = oncreate.bind(state);\r\n      if (onmount) lifeCycle.onmount = onmount.bind(state);\r\n      if (onupdate) lifeCycle.onupdate = onupdate.bind(state);\r\n\r\n      callLifeCycle(lifeCycle.oncreate);\r\n      render(template.call(state), node);\r\n      updateChildren(components);\r\n      callLifeCycle(lifeCycle.onmount);\r\n    });\r\n  };\r\n\r\n  return {\r\n    id,\r\n    generate: () => generate(document.querySelectorAll(id))\r\n  };\r\n};\r\n","export const dateFormat = epuch => {\r\n  let date = new Date(0);\r\n  date.setUTCSeconds(epuch);\r\n  return timeSince(date);\r\n};\r\n\r\nexport const actualDate = epuch => {\r\n  let date = new Date(0);\r\n  date.setUTCSeconds(epuch);\r\n  const ye = new Intl.DateTimeFormat('en', { year: 'numeric' }).format(date);\r\n  const mo = new Intl.DateTimeFormat('en', { month: 'long' }).format(date);\r\n  const da = new Intl.DateTimeFormat('en', { day: '2-digit' }).format(date);\r\n  return [dateFormat(epuch), `${da} ${mo} ${ye}`];\r\n};\r\n\r\nfunction timeSince(date) {\r\n  const seconds = Math.floor((new Date() - date) / 1000);\r\n\r\n  let interval = Math.floor(seconds / 31536000);\r\n\r\n  if (interval > 1) {\r\n    return interval + ' years ago';\r\n  }\r\n  interval = Math.floor(seconds / 2592000);\r\n  if (interval > 1) {\r\n    return interval + ' months ago';\r\n  }\r\n  interval = Math.floor(seconds / 86400);\r\n  if (interval > 1) {\r\n    return interval + ' days ago';\r\n  }\r\n  interval = Math.floor(seconds / 3600);\r\n  if (interval > 1) {\r\n    return interval + ' hours ago';\r\n  }\r\n  interval = Math.floor(seconds / 60);\r\n  if (interval > 1) {\r\n    return interval + ' minutes ago';\r\n  }\r\n  return Math.floor(seconds) + ' seconds ago';\r\n}\r\n","import Amp, { html } from '@arish-shah/amp';\r\n\r\nimport { dateFormat } from '../util/date';\r\n\r\nconst PostItem = Amp.component('amp-post-item', {\r\n  props: ['post', 'index'],\r\n  template() {\r\n    const {\r\n      title,\r\n      ups,\r\n      author,\r\n      created_utc,\r\n      num_comments,\r\n      url,\r\n      permalink,\r\n      domain\r\n    } = this.props.post;\r\n    return html`\r\n      <h2><a href=${url}>${title}</a> <small>(${domain})</small></h2>\r\n      <p class=\"meta\">\r\n        ${ups} upvotes by\r\n        <a href=${`#/user/${author}`}>${author}</a>\r\n        ${dateFormat(created_utc)} |\r\n        <a href=${`#${permalink}`}>${num_comments} comments</a>\r\n      </p>\r\n      <span class=\"index\">${this.props.index + 1}</span>\r\n    `;\r\n  }\r\n});\r\n\r\nconst FeedPage = Amp.component('amp-feed-page', {\r\n  props: ['data'],\r\n  components: [PostItem],\r\n  template() {\r\n    const posts = this.props.data.data.children;\r\n    return html`\r\n      ${posts.map(\r\n        (post, index) =>\r\n          html`<amp-post-item\r\n            :index=${index}\r\n            :post=${post.data}\r\n          ></amp-post-item>`\r\n      )}\r\n    `;\r\n  }\r\n});\r\n\r\nexport default FeedPage;\r\n","import Amp, { html } from '@arish-shah/amp';\r\n\r\nconst AboutPage = Amp.component('amp-about-page', {\r\n  template() {\r\n    document.title = 'About • amp-js Reddit Client';\r\n\r\n    return html`\r\n      <h1>About this site</h1>\r\n      <p>\r\n        This is a simple Reddit client app, built with components created using\r\n        <a href=\"https://npmjs.com/@arish-shah/amp\">amp-js</a>.\r\n      </p>\r\n      <p>\r\n        amp-js makes use of HTML templates to create user interfaces. These\r\n        templates are generated by tagging the ES6 template literal. The static\r\n        and dynamic part of the templates are separated allowing creation of\r\n        reactive applications easier. You can read more about the desing and\r\n        philosophy in the\r\n        <a href=\"https://github.com/Arish-Shah/amp-js\">github repo</a>.\r\n      </p>\r\n      <p>\r\n        We're using <a href=\"https://www.reddit.com/dev/api/\">Reddit API</a> as\r\n        a backend. The app is hosted on\r\n        <a href=\"https://www.netlify.com/\">Netlify</a>. The souce code is\r\n        <a href=\"https://github.com/Arish-Shah/amp-reddit-client\">here</a>.\r\n      </p>\r\n    `;\r\n  }\r\n});\r\n\r\nexport default AboutPage;\r\n","import Amp, { html } from '@arish-shah/amp';\r\n\r\nimport { dateFormat } from '../util/date';\r\n\r\nconst UserPage = Amp.component('amp-user-page', {\r\n  props: ['details'],\r\n  template() {\r\n    const {\r\n      name,\r\n      created_utc,\r\n      link_karma,\r\n      comment_karma,\r\n      subreddit\r\n    } = this.props.details.data;\r\n\r\n    document.title = `${name} • amp-js Reddit Client`;\r\n    const oldURL = `https://old.reddit.com/user/${name}`;\r\n    const url = `https://reddit.com/user/${name}`;\r\n\r\n    return html`\r\n      <h1>${name}</h1>\r\n      <p>\r\n        ...joined\r\n        <b> ${dateFormat(created_utc)}</b>, and has\r\n        <b>${link_karma + comment_karma} </b>\r\n        karma\r\n      </p>\r\n      <p>\r\n        <a href=${`${url}/posts`}>posts</a>\r\n        /\r\n        <a href=${`${url}/comments`}>comments</a>\r\n        /\r\n        <a href=${`${oldURL}/gilded`}>awards</a>\r\n      </p>\r\n      <p>${subreddit.public_description}</p>\r\n    `;\r\n  }\r\n});\r\n\r\nexport default UserPage;\r\n","export const copy = data => JSON.parse(JSON.stringify(data));\r\n","export const parse = html => {\r\n  const text = document.createElement('textarea');\r\n  text.innerHTML = html;\r\n  return text.value.replace(/href=\"\\/r\\//g, 'href=\"#/r/');\r\n};\r\n","import Amp, { html } from '@arish-shah/amp';\r\n\r\nimport { copy } from '../util/copy';\r\nimport { dateFormat } from '../util/date';\r\nimport { parse } from '../util/parse';\r\n\r\nconst Replies = Amp.component('amp-replies', {\r\n  props: ['data'],\r\n  template() {\r\n    const data = this.props.data;\r\n    const { author, body_html, created_utc } = data;\r\n\r\n    const replyBody = document.createElement('div');\r\n    replyBody.className = 'body';\r\n    replyBody.innerHTML = parse(body_html);\r\n\r\n    return html`\r\n      <span class=\"meta\">\r\n        <a href=${`#/user/${author}`}>${author}</a>\r\n        ${dateFormat(created_utc)}\r\n      </span>\r\n      ${replyBody}\r\n    `;\r\n  }\r\n});\r\n\r\nconst Comments = Amp.component('amp-comments', {\r\n  props: ['data'],\r\n  components: [Replies],\r\n  template() {\r\n    let replies = copy(this.props.data.data.children);\r\n    replies = replies.slice(0, replies.length - 2);\r\n\r\n    return html`\r\n      ${replies.map(\r\n        reply => html`<amp-replies :data=${reply.data}></amp-replies>`\r\n      )}\r\n    `;\r\n  }\r\n});\r\n\r\nexport default Comments;\r\n","import Amp, { html } from '@arish-shah/amp';\r\n\r\nimport Comments from '../components/Comments';\r\n\r\nimport { parse } from '../util/parse';\r\nimport { dateFormat } from '../util/date';\r\n\r\nconst CommentsPage = Amp.component('amp-commments-page', {\r\n  props: ['data'],\r\n  components: [Comments],\r\n  template() {\r\n    const postDetails = this.props.data[0];\r\n    const commentDetails = this.props.data[1];\r\n    const {\r\n      title,\r\n      author,\r\n      ups,\r\n      url,\r\n      created_utc,\r\n      domain,\r\n      selftext_html\r\n    } = postDetails.data.children[0].data;\r\n    document.title = title;\r\n\r\n    let selftext;\r\n    if (selftext_html) {\r\n      selftext = document.createElement('div');\r\n      selftext.className = 'body';\r\n      selftext.innerHTML = parse(selftext_html);\r\n    }\r\n\r\n    return html`\r\n      <article class=\"item\">\r\n        <h1><a href=${url}>${title}</a></h1>\r\n        <small>${domain}</small>\r\n        <p class=\"meta\">\r\n          ${ups} upvotes by\r\n          <a href=${`#/user/${author}`}>${author}</a>\r\n          ${dateFormat(created_utc)}\r\n        </p>\r\n        ${selftext}\r\n      </article>\r\n      <amp-comments :data=${commentDetails}></amp-comments>\r\n    `;\r\n  }\r\n});\r\n\r\nexport default CommentsPage;\r\n","import Amp, { html } from '@arish-shah/amp';\r\n\r\nconst Navbar = Amp.component('amp-navbar', {\r\n  onmount() {\r\n    let hash = window.location.hash;\r\n    if (hash === '') hash = '#/hot';\r\n\r\n    const links = document.querySelectorAll('nav a');\r\n    links.forEach(link => {\r\n      if (link.getAttribute('href') === hash) {\r\n        link.classList.add('active');\r\n      } else {\r\n        link.classList.remove('active');\r\n      }\r\n    });\r\n  },\r\n  template() {\r\n    return html`\r\n      <nav>\r\n        <div class=\"icon\">&amp;</div>\r\n        <ul>\r\n          <li><a href=\"#/hot\">hot</a></li>\r\n          <li><a href=\"#/new\">new</a></li>\r\n          <li><a href=\"#/top\">top</a></li>\r\n          <li><a href=\"#/r/pics\">pics</a></li>\r\n          <li><a href=\"#/r/askreddit\">ask</a></li>\r\n          <li class=\"about\"><a href=\"#/about\">about</a></li>\r\n        </ul>\r\n      </nav>\r\n    `;\r\n  }\r\n});\r\n\r\nexport default Navbar;\r\n","import Amp, { html } from '@arish-shah/amp';\r\n\r\nconst Progress = Amp.component('amp-progress', {\r\n  props: ['show'],\r\n  template() {\r\n    return html`\r\n      <div class=\"progress-bg\">\r\n        <div class=\"progress\"></div>\r\n      </div>\r\n    `;\r\n  }\r\n});\r\n\r\nexport default Progress;\r\n","export const getData = async url => {\r\n  let response = await fetch(url);\r\n  response = await response.json();\r\n  return response;\r\n};\r\n\r\nexport const getURL = () => {\r\n  const reddit = 'https://www.reddit.com';\r\n  const hash = window.location.hash.slice(2);\r\n\r\n  if (hash.indexOf('user/') > -1) {\r\n    return `${reddit}/${hash}/about.json`;\r\n  } else {\r\n    return `${reddit}/${hash}.json`;\r\n  }\r\n};\r\n","import Amp, { html } from '@arish-shah/amp';\r\n\r\nimport FeedPage from './pages/Feed';\r\nimport AboutPage from './pages/About';\r\nimport UserPage from './pages/User';\r\nimport CommentsPage from './pages/Comments';\r\n\r\nimport Navbar from './components/Navbar';\r\nimport Progress from './components/Progress';\r\nimport { getURL, getData } from './util/getData';\r\n\r\nconst Root = Amp.component('amp-root', {\r\n  onmount() {\r\n    window.addEventListener('load', this.router);\r\n    window.addEventListener('hashchange', this.router);\r\n  },\r\n  onupdate() {\r\n    console.log('updated');\r\n  },\r\n  data: {\r\n    cache: {},\r\n    current: {\r\n      loading: true,\r\n      hash: '',\r\n      data: null\r\n    }\r\n  },\r\n  methods: {\r\n    router() {\r\n      let hash = window.location.hash;\r\n      if (hash.indexOf('/about') > -1) {\r\n        this.current = {\r\n          hash,\r\n          data: {},\r\n          loading: false\r\n        };\r\n      } else {\r\n        this.updateCache(getURL());\r\n      }\r\n    },\r\n    updateCache(url) {\r\n      if (!this.cache[url]) {\r\n        this.current.loading = true;\r\n        getData(url)\r\n          .then(response => {\r\n            this.cache[url] = response;\r\n            this.current = {\r\n              hash: window.location.hash,\r\n              loading: false,\r\n              data: this.cache[url]\r\n            };\r\n          })\r\n          .catch(error => console.log(error));\r\n      } else {\r\n        this.current = {\r\n          hash: window.location.hash,\r\n          loading: false,\r\n          data: this.cache[url]\r\n        };\r\n      }\r\n    },\r\n    getPage() {\r\n      if (this.current.data) {\r\n        const hash = this.current.hash;\r\n        const progress = this.current.loading\r\n          ? html`<amp-progress></amp-progress>`\r\n          : null;\r\n\r\n        if (hash.indexOf('/user/') > -1) {\r\n          return html`\r\n            ${progress}\r\n            <amp-user-page :details=${this.current.data}></amp-user-page>\r\n          `;\r\n        } else if (hash.indexOf('/comments/') > -1) {\r\n          return html`\r\n            ${progress}\r\n            <amp-commments-page :data=${this.current.data}></amp-commments-page>\r\n          `;\r\n        } else if (hash.indexOf('/about') > -1) {\r\n          return html`\r\n            ${progress}\r\n            <amp-about-page></amp-about-page>\r\n          `;\r\n        } else {\r\n          return html`\r\n            ${progress}\r\n            <amp-feed-page :data=${this.current.data}></amp-feed-page>\r\n          `;\r\n        }\r\n      } else {\r\n        return html`<amp-progress></amp-progress>`;\r\n      }\r\n    }\r\n  },\r\n  components: [Navbar, Progress, FeedPage, CommentsPage, AboutPage, UserPage],\r\n  template() {\r\n    document.title = 'amp-js Reddit Client';\r\n\r\n    return html`\r\n      <amp-navbar></amp-navbar>\r\n      <main class=\"page\">\r\n        ${this.getPage()}\r\n      </main>\r\n    `;\r\n  }\r\n});\r\n\r\nRoot.generate();\r\n"]}